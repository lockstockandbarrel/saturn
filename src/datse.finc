!*==datse.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE DATSE
!
!        PURPOSE
!           NDIM POINTS OF A GIVEN TABLE WITH EQUIDISTANT ARGUMENTS ARE
!           SELECTED AND ORDERED SUCH THAT
!           ABS(ARG(I)-X).GE.ABS(ARG(J)-X) IF I.GT.J.
!
!        USAGE
!           CALL DATSE (X,ZS,DZ,F,IROW,ICOL,ARG,VAL,NDIM)
!
!        DESCRIPTION OF PARAMETERS
!           X      - DOUBLE PRECISION SEARCH ARGUMENT.
!           ZS     - DOUBLE PRECISION STARTING VALUE OF ARGUMENTS.
!           DZ     - DOUBLE PRECISION INCREMENT OF ARGUMENT VALUES.
!           F      - IN CASE ICOL=1, F IS THE DOUBLE PRECISION VECTOR
!                    OF FUNCTION VALUES (DIMENSION IROW).
!                    IN CASE ICOL=2, F IS A DOUBLE PRECISION IROW BY 2
!                    MATRIX. THE FIRST COLUMN SPECIFIES VECTOR OF FUNC-
!                    TION VALUES AND THE SECOND VECTOR OF DERIVATIVES.
!           IROW   - THE DIMENSION OF EACH COLUMN IN MATRIX F.
!           ICOL   - THE NUMBER OF COLUMNS IN F (I.E. 1 OR 2).
!           ARG    - RESULTING DOUBLE PRECISION VECTOR OF SELECTED AND
!                    ORDERED ARGUMENT VALUES (DIMENSION NDIM).
!           VAL    - RESULTING DOUBLE PRECISION VECTOR OF SELECTED
!                    FUNCTION VALUES (DIMENSION NDIM) IN CASE ICOL=1.
!                    IN CASE ICOL=2, VAL IS THE DOUBLE PRECISION VECTOR
!                    OF FUNCTION AND DERIVATIVE VALUES (DIMENSION
!                    2*NDIM) WHICH ARE STORED IN PAIRS (I.E. EACH FUNC-
!                    TION VALUE IS FOLLOWED BY ITS DERIVATIVE VALUE).
!           NDIM   - THE NUMBER OF POINTS WHICH MUST BE SELECTED OUT OF
!                    THE GIVEN TABLE.
!
!        REMARKS
!           NO ACTION IN CASE IROW LESS THAN 1.
!           IF INPUT VALUE NDIM IS GREATER THAN IROW, THE PROGRAM
!           SELECTS ONLY A MAXIMUM TABLE OF IROW POINTS.  THEREFORE THE
!           USER OUGHT TO CHECK CORRESPONDENCE BETWEEN TABLE (ARG,VAL)
!           AND ITS DIMENSION BY COMPARISON OF NDIM AND IROW, IN ORDER
!           TO GET CORRECT RESULTS IN FURTHER WORK WITH TABLE (ARG,VAL).
!           THIS TEST MAY BE DONE BEFORE OR AFTER CALLING
!           SUBROUTINE DATSE.
!           SUBROUTINE DATSE ESPECIALLY CAN BE USED FOR GENERATING THE
!           TABLE (ARG,VAL) NEEDED IN SUBROUTINES DALI, DAHI, AND DACFI.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           SELECTION IS DONE BY COMPUTING THE SUBSCRIPT J OF THAT
!           ARGUMENT, WHICH IS NEXT TO X.
!           AFTERWARDS NEIGHBOURING ARGUMENT VALUES ARE TESTED AND
!           SELECTED IN THE ABOVE SENSE.
!
!     ..................................................................
!
SUBROUTINE datse(X,Zs,Dz,F,Irow,Icol,Arg,Val,Ndim)
   IMPLICIT NONE

   INTEGER i,Icol,ii,iii,Irow,j,jl,jr,n,Ndim

!
!
   DIMENSION F(*),Arg(*),Val(*)
   DOUBLE PRECISION X,Zs,Dz,F,Arg,Val
   INTEGER :: spag_nextblock_1
   IF ( Irow<1 ) RETURN
   IF ( Irow/=1 ) THEN
!
!     CASE DZ=0 IS CHECKED OUT
      IF ( Dz/=0 ) THEN
         n = Ndim
!
!     IF N IS GREATER THAN IROW, N IS SET EQUAL TO IROW.
         IF ( n>Irow ) n = Irow
!
!     COMPUTATION OF STARTING SUBSCRIPT J.
         j = (X-Zs)/Dz + 1.5D0
         IF ( j<=0 ) j = 1
         IF ( j>Irow ) j = Irow
!
!     GENERATION OF TABLE ARG,VAL IN CASE DZ.NE.0.
         ii = j
         jl = 0
         jr = 0
         DO i = 1,n
            spag_nextblock_1 = 1
            SPAG_DispatchLoop_1: DO
               SELECT CASE (spag_nextblock_1)
               CASE (1)
                  Arg(i) = Zs + dfloat(ii-1)*Dz
                  IF ( Icol<2 ) THEN
                     Val(i) = F(ii)
                  ELSE
                     Val(2*i-1) = F(ii)
                     iii = ii + Irow
                     Val(2*i) = F(iii)
                  ENDIF
                  IF ( j+jr/=Irow ) THEN
                     IF ( j-jl/=1 ) THEN
                        IF ( (Arg(i)-X)*Dz>=0 ) THEN
                           spag_nextblock_1 = 2
                           CYCLE SPAG_DispatchLoop_1
                        ENDIF
                     ENDIF
                     jr = jr + 1
                     ii = j + jr
                     CYCLE
                  ENDIF
                  spag_nextblock_1 = 2
               CASE (2)
                  jl = jl + 1
                  ii = j - jl
                  EXIT SPAG_DispatchLoop_1
               END SELECT
            ENDDO SPAG_DispatchLoop_1
         ENDDO
         RETURN
      ENDIF
   ENDIF
!
!     CASE DZ=0
   Arg(1) = Zs
   Val(1) = F(1)
   IF ( Icol>2 ) Val(2) = F(2)
END SUBROUTINE datse
