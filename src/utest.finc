!*==utest.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE UTEST
!
!        PURPOSE
!           TEST WHETHER TWO INDEPENDENT GROUPS ARE FROM THE SAME
!           POPULATION BY MEANS OF MANN-WHITNEY U-TEST
!
!        USAGE
!           CALL UTEST(A,R,N1,N2,U,Z,IER)
!
!        DESCRIPTION OF PARAMETERS
!           A  - INPUT VECTOR OF CASES CONSISTING OF TWO INDEPENDENT
!                GROUPS . SMALLER GROUP PRECEDES LARGER GROUP. LENGTH
!                IS N1+N2.
!           R  - OUTPUT VECTOR OF RANKS. SMALLEST VALUE IS RANKED 1,
!                LARGEST IS RANKED N. TIES ARE ASSIGNED AVERAGE OF TIED
!                RANKS. LENGTH IS N1+N2.
!           N1 - NUMBER OF CASES IN SMALLER GROUP
!           N2 - NUMBER OF CASES IN LARGER GROUP
!           U  - STATISTIC USED TO TEST HOMOGENEITY OF THE TWO
!                GROUPS (OUTPUT)
!           Z  - MEASURE OF SIGNIFICANCE OF U IN TERMS OF NORMAL
!                DISTRIBUTION (OUTPUT)
!           IER- 0, IF NO ERROR.
!              - 1, IF ALL VALUES OF ONE GROUP ARE TIED.
!
!        REMARKS
!           Z IS SET TO ZERO IF N2 IS LESS THAN 20
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           RANK
!           TIE
!
!        METHOD
!           DESCRIBED IN S. SIEGEL, 'NONPARAMETRIC STATISTICS FOR THE
!           BEHAVIORAL SCIENCES', MCGRAW-HILL, NEW YORK, 1956,
!           CHAPTER 6
!
!     ..................................................................
!
SUBROUTINE utest(A,R,N1,N2,U,Z)
   IMPLICIT NONE

   REAL A,fn,fn2,fnx,R,r2,s,ts,U,up,Z
   INTEGER i,ier,kt,n,N1,N2,np

   DIMENSION A(*),R(*)
!
!        RANK SCORES FROM BOTH GROUP TOGETHER IN ASCENDING ORDER, AND
!        ASSIGN TIED OBSERVATIONS AVERAGE OF TIED RANKS
!
   n = N1 + N2
   CALL rank(A,R,n)
   Z = 0.0
!
!        SUM RANKS IN LARGER GROUP
!
   r2 = 0.0
   np = N1 + 1
   DO i = np,n
      r2 = r2 + R(i)
   ENDDO
!
!        CALCULATE U
!
   fnx = N1*N2
   fn = n
   fn2 = N2
   up = fnx + fn2*((fn2+1.0)/2.0) - r2
   U = fnx - up
   IF ( up<U ) U = up
!
!        TEST FOR N2 LESS THAN 20
!
   IF ( N2>=20 ) THEN
!
!        COMPUTE STANDARD DEVIATION
!
      kt = 1
      CALL tie(R,n,kt,ts)
      IF ( ts==0 ) THEN
         s = sqrt(fnx*(fn+1.0)/12.0)
         Z = (U-fnx*0.5)/s
      ELSEIF ( ts/=(fn*fn*fn-fn)/12 ) THEN
         s = sqrt((fnx/(fn*(fn-1.0)))*(((fn*fn*fn-fn)/12.0)-ts))
!
!        COMPUTE Z
!
         Z = (U-fnx*0.5)/s
      ELSE
         ier = 1
      ENDIF
   ENDIF
END SUBROUTINE utest
