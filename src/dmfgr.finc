!*==dmfgr.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE DMFGR
!
!        PURPOSE
!           FOR A GIVEN M BY N MATRIX THE FOLLOWING CALCULATIONS
!           ARE PERFORMED
!           (1) DETERMINE RANK AND LINEARLY INDEPENDENT ROWS AND
!               COLUMNS (BASIS).
!           (2) FACTORIZE A SUBMATRIX OF MAXIMAL RANK.
!           (3) EXPRESS NON-BASIC ROWS IN TERMS OF BASIC ONES.
!           (4) EXPRESS BASIC VARIABLES IN TERMS OF FREE ONES.
!
!        USAGE
!           CALL DMFGR(A,M,N,EPS,IRANK,IROW,ICOL)
!
!        DESCRIPTION OF PARAMETERS
!           A      - DOUBLE PRECISION GIVEN MATRIX WITH M ROWS
!                    AND N COLUMNS.
!                    ON RETURN A CONTAINS THE TRIANGULAR FACTORS
!                    OF A SUBMATRIX OF MAXIMAL RANK.
!           M      - NUMBER OF ROWS OF MATRIX A.
!           N      - NUMBER OF COLUMNS OF MATRIX A.
!           EPS    - SINGLE PRECISION TESTVALUE FOR ZERO AFFECTED BY
!                    ROUNDOFF NOISE.
!           IRANK  - RESULTANT RANK OF GIVEN MATRIX.
!           IROW   - INTEGER VECTOR OF DIMENSION M CONTAINING THE
!                    SUBSCRIPTS OF BASIC ROWS IN IROW(1),...,IROW(IRANK)
!           ICOL   - INTEGER VECTOR OF DIMENSION N CONTAINING THE
!                    SUBSCRIPTS OF BASIC COLUMNS IN ICOL(1) UP TO
!                    ICOL(IRANK).
!
!        REMARKS
!           THE LEFT HAND TRIANGULAR FACTOR IS NORMALIZED SUCH THAT
!           THE DIAGONAL CONTAINS ALL ONES THUS ALLOWING TO STORE ONLY
!           THE SUBDIAGONAL PART.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           GAUSSIAN ELIMINATION TECHNIQUE IS USED FOR CALCULATION
!           OF THE TRIANGULAR FACTORS OF A GIVEN MATRIX.
!           COMPLETE PIVOTING IS BUILT IN.
!           IN CASE OF A SINGULAR MATRIX ONLY THE TRIANGULAR FACTORS
!           OF A SUBMATRIX OF MAXIMAL RANK ARE RETAINED.
!           THE REMAINING PARTS OF THE RESULTANT MATRIX GIVE THE
!           DEPENDENCIES OF ROWS AND THE SOLUTION OF THE HOMOGENEOUS
!           MATRIX EQUATION A*X=0.
!
!     ..................................................................
!
SUBROUTINE dmfgr(A,M,N,Eps,Irank,Irow,Icol)
   IMPLICIT NONE

   REAL Eps,tol
   INTEGER i,ic,Icol,ii,ir,Irank,Irow,j,jj,kk,l,ll,M,mm,N,ncol,nm

!
!        DIMENSIONED DUMMY VARIABLES
   DIMENSION A(*),Irow(*),Icol(*)
   DOUBLE PRECISION A,piv,hold,save
   INTEGER :: spag_nextblock_1
   spag_nextblock_1 = 1
   SPAG_DispatchLoop_1: DO
      SELECT CASE (spag_nextblock_1)
      CASE (1)
!
!        TEST OF SPECIFIED DIMENSIONS
         IF ( M<=0 ) THEN
            Irank = -1
         ELSEIF ( N<=0 ) THEN
            Irank = -1
         ELSE
!        RETURN IN CASE OF FORMAL ERRORS
!
!
!        INITIALIZE COLUMN INDEX VECTOR
!        SEARCH FIRST PIVOT ELEMENT
            Irank = 0
            piv = 0.D0
            jj = 0
            DO j = 1,N
               Icol(j) = j
               DO i = 1,M
                  jj = jj + 1
                  hold = A(jj)
                  IF ( dabs(piv)<dabs(hold) ) THEN
                     piv = hold
                     ir = i
                     ic = j
                  ENDIF
               ENDDO
            ENDDO
!
!        INITIALIZE ROW INDEX VECTOR
            DO i = 1,M
               Irow(i) = i
            ENDDO
!
!        SET UP INTERNAL TOLERANCE
            tol = abs(Eps*sngl(piv))
!
!        INITIALIZE ELIMINATION LOOP
            nm = N*M
            SPAG_Loop_1_1: DO ncol = M,nm,M
!
!        TEST FOR FEASIBILITY OF PIVOT ELEMENT
               IF ( abs(sngl(piv))<=tol ) EXIT SPAG_Loop_1_1
!
!        UPDATE RANK
               Irank = Irank + 1
!
!        INTERCHANGE ROWS IF NECESSARY
               jj = ir - Irank
               IF ( jj>0 ) THEN
                  DO j = Irank,nm,M
                     i = j + jj
                     save = A(j)
                     A(j) = A(i)
                     A(i) = save
                  ENDDO
!
!        UPDATE ROW INDEX VECTOR
                  jj = Irow(ir)
                  Irow(ir) = Irow(Irank)
                  Irow(Irank) = jj
               ENDIF
!
!        INTERCHANGE COLUMNS IF NECESSARY
               jj = (ic-Irank)*M
               IF ( jj>0 ) THEN
                  kk = ncol
                  DO j = 1,M
                     i = kk + jj
                     save = A(kk)
                     A(kk) = A(i)
                     kk = kk - 1
                     A(i) = save
                  ENDDO
!
!        UPDATE COLUMN INDEX VECTOR
                  jj = Icol(ic)
                  Icol(ic) = Icol(Irank)
                  Icol(Irank) = jj
               ENDIF
               kk = Irank + 1
               mm = Irank - M
               ll = ncol + mm
!
!        TEST FOR LAST ROW
               IF ( mm>=0 ) THEN
                  spag_nextblock_1 = 3
                  CYCLE SPAG_DispatchLoop_1
               ENDIF
!
!        TRANSFORM CURRENT SUBMATRIX AND SEARCH NEXT PIVOT
               jj = ll
               save = piv
               piv = 0.D0
               DO j = kk,M
                  jj = jj + 1
                  hold = A(jj)/save
                  A(jj) = hold
                  l = j - Irank
!
!        TEST FOR LAST COLUMN
                  IF ( Irank>=N ) GOTO 2
                  ii = jj
                  DO i = kk,N
                     ii = ii + M
                     mm = ii - l
                     A(ii) = A(ii) - hold*A(mm)
                     IF ( dabs(A(ii))>dabs(piv) ) THEN
                        piv = A(ii)
                        ir = j
                        ic = i
                     ENDIF
 2                ENDDO
               ENDDO
            ENDDO SPAG_Loop_1_1
!
!        SET UP MATRIX EXPRESSING ROW DEPENDENCIES
            IF ( Irank<1 ) THEN
               spag_nextblock_1 = 2
               CYCLE SPAG_DispatchLoop_1
            ENDIF
            IF ( Irank/=1 ) THEN
               ir = ll
               DO j = 2,Irank
                  ii = j - 1
                  ir = ir - M
                  jj = ll
                  DO i = kk,M
                     hold = 0.D0
                     jj = jj + 1
                     mm = jj
                     ic = ir
                     DO l = 1,ii
                        hold = hold + A(mm)*A(ic)
                        ic = ic - 1
                        mm = mm - M
                     ENDDO
                     A(mm) = A(mm) - hold
                  ENDDO
               ENDDO
            ENDIF
            spag_nextblock_1 = 3
            CYCLE SPAG_DispatchLoop_1
         ENDIF
         spag_nextblock_1 = 2
      CASE (2)
         RETURN
      CASE (3)
!
!        TEST FOR COLUMN REGULARITY
         IF ( N<=Irank ) THEN
            spag_nextblock_1 = 2
            CYCLE SPAG_DispatchLoop_1
         ENDIF
!
!        SET UP MATRIX EXPRESSING BASIC VARIABLES IN TERMS OF FREE
!        PARAMETERS (HOMOGENEOUS SOLUTION).
         ir = ll
         kk = ll + M
         DO j = 1,Irank
            DO i = kk,nm,M
               jj = ir
               ll = i
               hold = 0.D0
               ii = j
               SPAG_Loop_3_2: DO
                  ii = ii - 1
                  IF ( ii<=0 ) THEN
                     A(ll) = (hold-A(ll))/A(jj)
                     EXIT SPAG_Loop_3_2
                  ELSE
                     hold = hold - A(jj)*A(ll)
                     jj = jj - M
                     ll = ll - 1
                  ENDIF
               ENDDO SPAG_Loop_3_2
            ENDDO
            ir = ir - 1
         ENDDO
         EXIT SPAG_DispatchLoop_1
      END SELECT
   ENDDO SPAG_DispatchLoop_1
END SUBROUTINE dmfgr
