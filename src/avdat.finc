!*==avdat.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE AVDAT
!
!        PURPOSE
!           PLACE DATA FOR ANALYSIS OF VARIANCE IN PROPERLY DISTRIBUTED
!           POSITIONS OF STORAGE.  THIS SUBROUTINE IS NORMALLY FOLLOWED
!           BY CALLS TO AVCAL AND MEANQ SUBROUTINES IN THE PERFORMANCE
!           OF ANALYSIS OF VARIANCE FOR A COMPLETE FACTORIAL DESIGN.
!
!        USAGE
!           CALL AVDAT (K,LEVEL,N,X,L,ISTEP,KOUNT)
!
!        DESCRIPTION OF PARAMETERS
!           K     - NUMBER OF VARIABLES (FACTORS). K MUST BE .GT. ONE.
!           LEVEL - INPUT VECTOR OF LENGTH K CONTAINING LEVELS (CATE-
!                   GORIES) WITHIN EACH VARIABLE.
!           N     - TOTAL NUMBER OF DATA POINTS READ IN.
!           X     - WHEN THE SUBROUTINE IS CALLED, THIS VECTOR CONTAINS
!                   DATA IN LOCATIONS X(1) THROUGH X(N).  UPON RETURNING
!                   TO THE CALLING ROUTINE, THE VECTOR CONTAINS THE DATA
!                   IN PROPERLY REDISTRIBUTED LOCATIONS OF VECTOR X.
!                   THE LENGTH OF VECTOR X IS CALCULATED BY (1) ADDING
!                   ONE TO EACH LEVEL OF VARIABLE AND (2) OBTAINING THE
!                   CUMULATIVE PRODUCT OF ALL LEVELS.  (THE LENGTH OF
!                   X = (LEVEL(1)+1)*(LEVEL(2)+1)*...*(LEVEL(K)+1).)
!           L     - OUTPUT VARIABLE CONTAINING THE POSITION IN VECTOR X
!                   WHERE THE LAST INPUT DATA IS STORED.
!           ISTEP - OUTPUT VECTOR OF LENGTH K CONTAINING CONTROL STEPS
!                   WHICH ARE USED TO LOCATE DATA IN PROPER POSITIONS
!                   OF VECTOR X.
!           KOUNT - WORKING VECTOR OF LENGTH K.
!
!        REMARKS
!           INPUT DATA MUST BE ARRANGED IN THE FOLLOWING MANNER.
!           CONSIDER THE 3-VARIABLE ANALYSIS OF VARIANCE DESIGN, WHERE
!           ONE VARIABLE HAS 3 LEVELS AND THE OTHER TWO VARIABLES HAVE
!           2 LEVELS.  THE DATA MAY BE REPRESENTED IN THE FORM X(I,J,K),
!           I=1,2,3  J=1,2  K=1,2.  IN ARRANGING DATA, THE INNER
!           SUBSCRIPT, NAMELY I, CHANGES FIRST.  WHEN I=3, THE NEXT
!           INNER SUBSCRIPT, J, CHANGES AND SO ON UNTIL I=3, J=2, AND
!           K=2.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           THE METHOD IS BASED ON THE TECHNIQUE DISCUSSED BY H. O.
!           HARTLEY IN 'MATHEMATICAL METHODS FOR DIGITAL COMPUTERS',
!           EDITED BY A. RALSTON AND H. WILF, JOHN WILEY AND SONS,
!           1962, CHAPTER 20.
!
!     ..................................................................
!
SUBROUTINE avdat(K,Level,N,X,L,Istep,Kount)
   IMPLICIT NONE

   INTEGER i,Istep,j,K,Kount,L,Level,m,N,n1,n2
   REAL X

   DIMENSION Level(*),X(*),Istep(*),Kount(*)
!
!        ...............................................................
!
!        IF A DOUBLE PRECISION VERSION OF THIS ROUTINE IS DESIRED, THE
!        C IN COLUMN 1 SHOULD BE REMOVED FROM THE DOUBLE PRECISION
!        STATEMENT WHICH FOLLOWS.
!
!     DOUBLE PRECISION X
!
!        THE C MUST ALSO BE REMOVED FROM DOUBLE PRECISION STATEMENTS
!        APPEARING IN OTHER ROUTINES USED IN CONJUNCTION WITH THIS
!        ROUTINE.
!
!        ...............................................................
!
!     CALCULATE TOTAL DATA AREA REQUIRED
!
   m = Level(1) + 1
   DO i = 2,K
      m = m*(Level(i)+1)
   ENDDO
!
!     MOVE DATA TO THE UPPER PART OF THE ARRAY X
!     FOR THE PURPOSE OF REARRANGEMENT
!
   n1 = m + 1
   n2 = N + 1
   DO i = 1,N
      n1 = n1 - 1
      n2 = n2 - 1
      X(n1) = X(n2)
   ENDDO
!
!     CALCULATE MULTIPLIERS TO BE USED IN FINDING STORAGE LOCATIONS FOR
!     INPUT DATA
!
   Istep(1) = 1
   DO i = 2,K
      Istep(i) = Istep(i-1)*(Level(i-1)+1)
   ENDDO
   DO i = 1,K
      Kount(i) = 1
   ENDDO
!
!     PLACE DATA IN PROPER LOCATIONS
!
   n1 = n1 - 1
   DO i = 1,N
      L = Kount(1)
      DO j = 2,K
         L = L + Istep(j)*(Kount(j)-1)
      ENDDO
      n1 = n1 + 1
      X(L) = X(n1)
      SPAG_Loop_2_1: DO j = 1,K
         IF ( Kount(j)/=Level(j) ) THEN
            Kount(j) = Kount(j) + 1
            EXIT SPAG_Loop_2_1
         ELSE
            Kount(j) = 1
         ENDIF
      ENDDO SPAG_Loop_2_1
   ENDDO
END SUBROUTINE avdat
