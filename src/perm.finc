!*==perm.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE PERM
!
!        PURPOSE
!           TO COMPUTE THE PERMUTATION VECTOR THAT IS INVERSE TO A GIVEN
!           PERMUTATION VECTOR, THE PERMUTATION VECTOR THAT IS EQUIVA-
!           LENT TO A GIVEN TRANSPOSITION VECTOR AND A TRANSPOSITION
!           VECTOR THAT IS EQUIVALENT TO A GIVEN PERMUTATION VECTOR.
!           (SEE THE GENERAL DISCUSSION FOR DEFINITIONS AND NOTATION.)
!
!        USAGE
!           CALL PERM(IP1,IP2,N,IPAR,IER)
!
!        DESCRIPTION OF PARAMETERS
!           IP1  - GIVEN PERMUTATION OR TRANSPOSITION VECTOR
!                  (DIMENSION N)
!           IP2  - RESULTING PERMUTATION OR TRANSPOSITION VECTOR
!                  (DIMENSION N)
!           N    - DIMENSION OF VECTORS IP1 AND IP2
!           IPAR - INPUT PARAMETER
!                  IPAR NEGATIVE - COMPUTE THE PERMUTATION VECTOR IP2
!                                  THAT IS THE INVERSE OF THE PERMUTA-
!                                  TION VECTOR IP1
!                  IPAR  =  ZERO - COMPUTE THE PERMUTATION VECTOR IP2
!                                  THAT IS EQUIVALENT TO THE TRANSPOSI-
!                                  TION VECTOR IP1
!                  IPAR POSITIVE - COMPUTE A TRANSPOSITION VECTOR IP2
!                                  THAT IS EQUIVALENT TO THE PERMUTATION
!                                  VECTOR IP1
!           IER  - RESULTING ERROR PARAMETER
!                  IER=-1  -  N IS NOT POSITIVE
!                  IER= 0  -  NO ERROR
!                  IER= 1  -  IP1 IS EITHER NOT A PERMUTATION VECTOR OR
!                             NOT A TRANSPOSITION VECTOR ON 1,...,N,
!                             DEPENDING ON WHETHER IPAR IS NON-ZERO OR
!                             ZERO, RESPECTIVELY
!
!        REMARKS
!           (1)  IF IER=-1 THERE HAS BEEN NO COMPUTATION.
!           (2)  IF IER=1, THEN COMPUTATION HAS BEEN UNSUCCESSFUL DUE TO
!                ERROR AND THE PARTIAL RESULTS FOUND IN IP2 ARE USELESS.
!           (3)  IP2 CANNOT HAVE THE SAME STORAGE ALLOCATION AS IP1.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           (1)  IPAR NEGATIVE - FOR EACH I, I=1,...,N, IP2(IP1(I)) IS
!                                SET TO I.
!           (2)  IPAR  =  ZERO - INITIALLY IP2(I) IS SET TO I FOR
!                                I=1,...,N.  THEN, FOR I=1,...,N IN THAT
!                                ORDER, IP2(I) AND IP2(IP1(I)) ARE
!                                INTERCHANGED.
!           (3)  IPAR POSITIVE - INITIALLY IP1 IS MOVED TO IP2.  THEN
!                                THE FOLLOWING TWO STEPS ARE REPEATED
!                                FOR I SUCCESSIVELY EQUAL TO 1,...,N.
!                                (A) FIND THE SMALLEST J GREATER THAN OR
!                                    EQUAL TO I SUCH THAT IP2(J)=I.
!                                (B) SET IP2(J) TO IP2(I).
!
!     ..................................................................
!
SUBROUTINE perm(Ip1,Ip2,N,Ipar,Ier)
   IMPLICIT NONE

   INTEGER i,Ier,Ip1,Ip2,Ipar,j,k,N,nn

!
!
   DIMENSION Ip1(*),Ip2(*)
   INTEGER :: spag_nextblock_1
   INTEGER :: spag_nextblock_2
   spag_nextblock_1 = 1
   SPAG_DispatchLoop_1: DO
      SELECT CASE (spag_nextblock_1)
      CASE (1)
!
!        TEST DIMENSION
         IF ( N<=0 ) THEN
!
!        ERROR RETURN - N IS NOT POSITIVE
            Ier = -1
            RETURN
         ELSE
!
!        TEST IPAR TO DETERMINE WHETHER IP1 IS TO BE INTERPRETED AS
!        A PERMUTATION VECTOR OR AS A TRANSPOSITION VECTOR
            IF ( Ipar/=0 ) THEN
!
!        CHECK THAT IP1 IS A PERMUTATION VECTOR AND COMPUTE IP1 INVERSE
               DO i = 1,N
                  Ip2(i) = 0
               ENDDO
               DO i = 1,N
                  k = Ip1(i)
                  IF ( k<N ) THEN
                     IF ( k<=0 ) THEN
                        spag_nextblock_1 = 2
                        CYCLE SPAG_DispatchLoop_1
                     ENDIF
                  ELSEIF ( k/=N ) THEN
                     spag_nextblock_1 = 2
                     CYCLE SPAG_DispatchLoop_1
                  ENDIF
                  IF ( Ip2(k)/=0 ) THEN
                     spag_nextblock_1 = 2
                     CYCLE SPAG_DispatchLoop_1
                  ENDIF
                  Ip2(k) = i
               ENDDO
!
!        TEST IPAR FOR THE DESIRED OPERATION
               IF ( Ipar>=0 ) THEN
!
!        COMPUTE TRANSPOSITION VECTOR IP2 FOR PERMUTATION VECTOR IP1
                  DO i = 1,N
                     Ip2(i) = Ip1(i)
                  ENDDO
                  nn = N - 1
                  IF ( nn>0 ) THEN
                     DO i = 1,nn
                        spag_nextblock_2 = 1
                        SPAG_DispatchLoop_2: DO
                           SELECT CASE (spag_nextblock_2)
                           CASE (1)
                              DO j = 1,nn
                                 IF ( Ip2(j)==i ) THEN
                                    spag_nextblock_2 = 2
                                    CYCLE SPAG_DispatchLoop_2
                                 ENDIF
                              ENDDO
                              j = N
                              spag_nextblock_2 = 2
                           CASE (2)
                              Ip2(j) = Ip2(i)
                              EXIT SPAG_DispatchLoop_2
                           END SELECT
                        ENDDO SPAG_DispatchLoop_2
                     ENDDO
                  ENDIF
               ENDIF
            ELSE
!
!        COMPUTE PERMUTATION VECTOR IP2 FOR TRANSPOSITION VECTOR IP1
               DO i = 1,N
                  Ip2(i) = i
               ENDDO
               DO i = 1,N
                  k = Ip1(i)
                  IF ( k<i ) THEN
                     IF ( k<=0 ) THEN
                        spag_nextblock_1 = 2
                        CYCLE SPAG_DispatchLoop_1
                     ENDIF
                  ELSEIF ( k==i ) THEN
                     CYCLE
                  ELSEIF ( N<k ) THEN
                     spag_nextblock_1 = 2
                     CYCLE SPAG_DispatchLoop_1
                  ENDIF
                  j = Ip2(i)
                  Ip2(i) = Ip2(k)
                  Ip2(k) = j
               ENDDO
            ENDIF
!
!        NORMAL RETURN - NO ERROR
            Ier = 0
            RETURN
         ENDIF
      CASE (2)
!
!        ERROR RETURN - IP1 IS EITHER NOT A PERMUTATION VECTOR
!                       OR NOT A TRANSPOSITION VECTOR
         Ier = 1
         EXIT SPAG_DispatchLoop_1
      END SELECT
   ENDDO SPAG_DispatchLoop_1
END SUBROUTINE perm
