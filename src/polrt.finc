!*==polrt.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE POLRT
!
!        PURPOSE
!           COMPUTES THE REAL AND COMPLEX ROOTS OF A REAL POLYNOMIAL
!
!        USAGE
!           CALL POLRT(XCOF,COF,M,ROOTR,ROOTI,IER)
!
!        DESCRIPTION OF PARAMETERS
!           XCOF -VECTOR OF M+1 COEFFICIENTS OF THE POLYNOMIAL
!                 ORDERED FROM SMALLEST TO LARGEST POWER
!           COF  -WORKING VECTOR OF LENGTH M+1
!           M    -ORDER OF POLYNOMIAL
!           ROOTR-RESULTANT VECTOR OF LENGTH M CONTAINING REAL ROOTS
!                 OF THE POLYNOMIAL
!           ROOTI-RESULTANT VECTOR OF LENGTH M CONTAINING THE
!                 CORRESPONDING IMAGINARY ROOTS OF THE POLYNOMIAL
!           IER  -ERROR CODE WHERE
!                 IER=0  NO ERROR
!                 IER=1  M LESS THAN ONE
!                 IER=2  M GREATER THAN 36
!                 IER=3  UNABLE TO DETERMINE ROOT WITH 500 INTERATIONS
!                        ON 5 STARTING VALUES
!                 IER=4  HIGH ORDER COEFFICIENT IS ZERO
!
!        REMARKS
!           LIMITED TO 36TH ORDER POLYNOMIAL OR LESS.
!           FLOATING POINT OVERFLOW MAY OCCUR FOR HIGH ORDER
!           POLYNOMIALS BUT WILL NOT AFFECT THE ACCURACY OF THE RESULTS.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           NEWTON-RAPHSON ITERATIVE TECHNIQUE.  THE FINAL ITERATIONS
!           ON EACH ROOT ARE PERFORMED USING THE ORIGINAL POLYNOMIAL
!           RATHER THAN THE REDUCED POLYNOMIAL TO AVOID ACCUMULATED
!           ERRORS IN THE REDUCED POLYNOMIAL.
!
!     ..................................................................
!
SUBROUTINE polrt(Xcof,Cof,M,Rootr,Rooti,Ier)
   IMPLICIT NONE

   REAL Cof,fi,Rooti,Rootr,Xcof
   INTEGER i,ict,Ier,ifit,in,itemp,kj1,l,M,mt,n,n2,nx,nxx

   DIMENSION Xcof(*),Cof(*),Rootr(*),Rooti(*)
   DOUBLE PRECISION xo,yo,x,y,xpr,ypr,ux,uy,v,yt,xt,u,xt2,yt2,sumsq,dx,dy,temp,alpha
   INTEGER :: spag_nextblock_1
   spag_nextblock_1 = 1
   SPAG_DispatchLoop_1: DO
      SELECT CASE (spag_nextblock_1)
      CASE (1)
!
!        ...............................................................
!
!        IF A DOUBLE PRECISION VERSION OF THIS ROUTINE IS DESIRED, THE
!        C IN COLUMN 1 SHOULD BE REMOVED FROM THE DOUBLE PRECISION
!        STATEMENT WHICH FOLLOWS.
!
!     DOUBLE PRECISION XCOF,COF,ROOTR,ROOTI
!
!        THE C MUST ALSO BE REMOVED FROM DOUBLE PRECISION STATEMENTS
!        APPEARING IN OTHER ROUTINES USED IN CONJUNCTION WITH THIS
!        ROUTINE.
!        THE DOUBLE PRECISION VERSION MAY BE MODIFIED BY CHANGING THE
!        CONSTANT IN STATEMENT 78 TO 1.0D-12 AND IN STATEMENT 122 TO
!        1.0D-10.  THIS WILL PROVIDE HIGHER PRECISION RESULTS AT THE
!        COST OF EXECUTION TIME
!
!        ...............................................................
!
         ifit = 0
         n = M
         Ier = 0
         IF ( Xcof(n+1)==0 ) THEN
!
!        SET ERROR CODE TO 4
!
            Ier = 4
         ELSEIF ( n<=0 ) THEN
!
!        SET ERROR CODE TO 1
!
            Ier = 1
         ELSEIF ( n<=36 ) THEN
            nx = n
            nxx = n + 1
            n2 = 1
            kj1 = n + 1
            DO l = 1,kj1
               mt = kj1 - l + 1
               Cof(mt) = Xcof(l)
            ENDDO
            spag_nextblock_1 = 3
            CYCLE SPAG_DispatchLoop_1
         ELSE
!
!        SET ERROR CODE TO 2
!
            Ier = 2
         ENDIF
         spag_nextblock_1 = 2
      CASE (2)
         RETURN
      CASE (3)
!
!        SET INITIAL VALUES
!
         xo = .00500101
         yo = 0.01000101
!
!        ZERO INITIAL VALUE COUNTER
!
         in = 0
         spag_nextblock_1 = 4
      CASE (4)
         x = xo
!
!        INCREMENT INITIAL VALUES AND COUNTER
!
         xo = -10.0*yo
         yo = -10.0*x
!
!        SET X AND Y TO CURRENT VALUE
!
         x = xo
         y = yo
         in = in + 1
!
!        EVALUATE POLYNOMIAL AND DERIVATIVES
!
         ict = 0
         SPAG_Loop_1_1: DO
            ux = 0.0
            uy = 0.0
            v = 0.0
            yt = 0.0
            xt = 1.0
            u = Cof(n+1)
            IF ( u/=0 ) THEN
               DO i = 1,n
                  l = n - i + 1
                  temp = Cof(l)
                  xt2 = x*xt - y*yt
                  yt2 = x*yt + y*xt
                  u = u + temp*xt2
                  v = v + temp*yt2
                  fi = i
                  ux = ux + fi*xt*temp
                  uy = uy - fi*yt*temp
                  xt = xt2
                  yt = yt2
               ENDDO
               sumsq = ux*ux + uy*uy
               IF ( sumsq/=0 ) THEN
                  dx = (v*uy-u*ux)/sumsq
                  x = x + dx
                  dy = -(u*uy+v*ux)/sumsq
                  y = y + dy
                  IF ( dabs(dy)+dabs(dx)>=1.0D-05 ) THEN
!
!        STEP ITERATION COUNTER
!
                     ict = ict + 1
                     IF ( ict<500 ) CYCLE
                     IF ( ifit==0 ) THEN
                        IF ( in<5 ) THEN
                           spag_nextblock_1 = 4
                           CYCLE SPAG_DispatchLoop_1
                        ENDIF
!
!        SET ERROR CODE TO 3
!
                        Ier = 3
                        spag_nextblock_1 = 2
                        CYCLE SPAG_DispatchLoop_1
                     ENDIF
                  ENDIF
                  DO l = 1,nxx
                     mt = kj1 - l + 1
                     temp = Xcof(mt)
                     Xcof(mt) = Cof(l)
                     Cof(l) = temp
                  ENDDO
                  itemp = n
                  n = nx
                  nx = itemp
                  IF ( ifit==0 ) THEN
                     ifit = 1
                     xpr = x
                     ypr = y
                     ict = 0
                     CYCLE
                  ENDIF
               ELSE
                  IF ( ifit==0 ) THEN
                     spag_nextblock_1 = 4
                     CYCLE SPAG_DispatchLoop_1
                  ENDIF
                  x = xpr
                  y = ypr
               ENDIF
               ifit = 0
               IF ( dabs(y)<1.0D-4*dabs(x) ) EXIT SPAG_Loop_1_1
               alpha = x + x
               sumsq = x*x + y*y
               n = n - 2
               spag_nextblock_1 = 5
               CYCLE SPAG_DispatchLoop_1
            ELSE
               x = 0.0
               nx = nx - 1
               nxx = nxx - 1
               EXIT SPAG_Loop_1_1
            ENDIF
         ENDDO SPAG_Loop_1_1
         y = 0.0
         sumsq = 0.0
         alpha = x
         n = n - 1
         spag_nextblock_1 = 5
      CASE (5)
         Cof(2) = Cof(2) + alpha*Cof(1)
         DO l = 2,n
            Cof(l+1) = Cof(l+1) + alpha*Cof(l) - sumsq*Cof(l-1)
         ENDDO
         DO
            Rooti(n2) = y
            Rootr(n2) = x
            n2 = n2 + 1
            IF ( sumsq/=0 ) THEN
               y = -y
               sumsq = 0.0
            ELSE
               IF ( n>0 ) THEN
                  spag_nextblock_1 = 3
                  CYCLE SPAG_DispatchLoop_1
               ENDIF
               spag_nextblock_1 = 2
               CYCLE SPAG_DispatchLoop_1
            ENDIF
         ENDDO
         EXIT SPAG_DispatchLoop_1
      END SELECT
   ENDDO SPAG_DispatchLoop_1
END SUBROUTINE polrt
