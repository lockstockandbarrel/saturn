!*==dmfsd.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE DMFSD
!
!        PURPOSE
!           FACTOR A GIVEN SYMMETRIC POSITIVE DEFINITE MATRIX
!
!        USAGE
!           CALL DMFSD(A,N,EPS,IER)
!
!        DESCRIPTION OF PARAMETERS
!           A      - DOUBLE PRECISION UPPER TRIANGULAR PART OF GIVEN
!                    SYMMETRIC POSITIVE DEFINITE N BY N COEFFICIENT
!                    MATRIX.
!                    ON RETURN A CONTAINS THE RESULTANT UPPER
!                    TRIANGULAR MATRIX IN DOUBLE PRECISION.
!           N      - THE NUMBER OF ROWS (COLUMNS) IN GIVEN MATRIX.
!           EPS    - SINGLE PRECISION INPUT CONSTANT WHICH IS USED
!                    AS RELATIVE TOLERANCE FOR TEST ON LOSS OF
!                    SIGNIFICANCE.
!           IER    - RESULTING ERROR PARAMETER CODED AS FOLLOWS
!                    IER=0  - NO ERROR
!                    IER=-1 - NO RESULT BECAUSE OF WRONG INPUT PARAME-
!                             TER N OR BECAUSE SOME RADICAND IS NON-
!                             POSITIVE (MATRIX A IS NOT POSITIVE
!                             DEFINITE, POSSIBLY DUE TO LOSS OF SIGNI-
!                             FICANCE)
!                    IER=K  - WARNING WHICH INDICATES LOSS OF SIGNIFI-
!                             CANCE. THE RADICAND FORMED AT FACTORIZA-
!                             TION STEP K+1 WAS STILL POSITIVE BUT NO
!                             LONGER GREATER THAN ABS(EPS*A(K+1,K+1)).
!
!        REMARKS
!           THE UPPER TRIANGULAR PART OF GIVEN MATRIX IS ASSUMED TO BE
!           STORED COLUMNWISE IN N*(N+1)/2 SUCCESSIVE STORAGE LOCATIONS.
!           IN THE SAME STORAGE LOCATIONS THE RESULTING UPPER TRIANGU-
!           LAR MATRIX IS STORED COLUMNWISE TOO.
!           THE PROCEDURE GIVES RESULTS IF N IS GREATER THAN 0 AND ALL
!           CALCULATED RADICANDS ARE POSITIVE.
!           THE PRODUCT OF RETURNED DIAGONAL TERMS IS EQUAL TO THE
!           SQUARE-ROOT OF THE DETERMINANT OF THE GIVEN MATRIX.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           SOLUTION IS DONE USING THE SQUARE-ROOT METHOD OF CHOLESKY.
!           THE GIVEN MATRIX IS REPRESENTED AS PRODUCT OF TWO TRIANGULAR
!           MATRICES, WHERE THE LEFT HAND FACTOR IS THE TRANSPOSE OF
!           THE RETURNED RIGHT HAND FACTOR.
!
!     ..................................................................
!
SUBROUTINE dmfsd(A,N,Eps,Ier)
   IMPLICIT NONE

   REAL Eps,tol
   INTEGER i,Ier,ind,k,kpiv,l,lanf,lend,lind,N

!
!
   DIMENSION A(*)
   DOUBLE PRECISION dpiv,dsum,A
!
!        TEST ON WRONG INPUT PARAMETER N
   IF ( N>=1 ) THEN
      Ier = 0
!
!        INITIALIZE DIAGONAL-LOOP
      kpiv = 0
      DO k = 1,N
         kpiv = kpiv + k
         ind = kpiv
         lend = k - 1
!
!        CALCULATE TOLERANCE
         tol = abs(Eps*sngl(A(kpiv)))
!
!        START FACTORIZATION-LOOP OVER K-TH ROW
         DO i = k,N
            dsum = 0.D0
            IF ( lend/=0 ) THEN
!
!        START INNER LOOP
               DO l = 1,lend
                  lanf = kpiv - l
                  lind = ind - l
                  dsum = dsum + A(lanf)*A(lind)
               ENDDO
            ENDIF
!        END OF INNER LOOP
!
!        TRANSFORM ELEMENT A(IND)
            dsum = A(ind) - dsum
            IF ( i/=k ) THEN
!
!        CALCULATE TERMS IN ROW
               A(ind) = dsum*dpiv
            ELSE
!
!        TEST FOR NEGATIVE PIVOT ELEMENT AND FOR LOSS OF SIGNIFICANCE
               IF ( sngl(dsum)<=tol ) THEN
                  IF ( dsum<=0 ) THEN
                     CALL spag_block_1
                     RETURN
                  ENDIF
                  IF ( Ier<=0 ) Ier = k - 1
               ENDIF
!
!        COMPUTE PIVOT ELEMENT
               dpiv = dsqrt(dsum)
               A(kpiv) = dpiv
               dpiv = 1.D0/dpiv
            ENDIF
            ind = ind + i
         ENDDO
      ENDDO
!        END OF DIAGONAL-LOOP
!
      RETURN
   ENDIF
   CALL spag_block_1
CONTAINS
   SUBROUTINE spag_block_1
      Ier = -1
   END SUBROUTINE spag_block_1
END SUBROUTINE dmfsd
