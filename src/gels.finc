!*==gels.f90 processed by SPAG 8.01RF 00:35  2 Mar 2025

!
!     ..................................................................
!
!        SUBROUTINE GELS
!
!        PURPOSE
!           TO SOLVE A SYSTEM OF SIMULTANEOUS LINEAR EQUATIONS WITH
!           SYMMETRIC COEFFICIENT MATRIX UPPER TRIANGULAR PART OF WHICH
!           IS ASSUMED TO BE STORED COLUMNWISE.
!
!        USAGE
!           CALL GELS(R,A,M,N,EPS,IER,AUX)
!
!        DESCRIPTION OF PARAMETERS
!           R      - M BY N RIGHT HAND SIDE MATRIX.  (DESTROYED)
!                    ON RETURN R CONTAINS THE SOLUTION OF THE EQUATIONS.
!           A      - UPPER TRIANGULAR PART OF THE SYMMETRIC
!                    M BY M COEFFICIENT MATRIX.  (DESTROYED)
!           M      - THE NUMBER OF EQUATIONS IN THE SYSTEM.
!           N      - THE NUMBER OF RIGHT HAND SIDE VECTORS.
!           EPS    - AN INPUT CONSTANT WHICH IS USED AS RELATIVE
!                    TOLERANCE FOR TEST ON LOSS OF SIGNIFICANCE.
!           IER    - RESULTING ERROR PARAMETER CODED AS FOLLOWS
!                    IER=0  - NO ERROR,
!                    IER=-1 - NO RESULT BECAUSE OF M LESS THAN 1 OR
!                             PIVOT ELEMENT AT ANY ELIMINATION STEP
!                             EQUAL TO 0,
!                    IER=K  - WARNING DUE TO POSSIBLE LOSS OF SIGNIFI-
!                             CANCE INDICATED AT ELIMINATION STEP K+1,
!                             WHERE PIVOT ELEMENT WAS LESS THAN OR
!                             EQUAL TO THE INTERNAL TOLERANCE EPS TIMES
!                             ABSOLUTELY GREATEST MAIN DIAGONAL
!                             ELEMENT OF MATRIX A.
!           AUX    - AN AUXILIARY STORAGE ARRAY WITH DIMENSION M-1.
!
!        REMARKS
!           UPPER TRIANGULAR PART OF MATRIX A IS ASSUMED TO BE STORED
!           COLUMNWISE IN M*(M+1)/2 SUCCESSIVE STORAGE LOCATIONS, RIGHT
!           HAND SIDE MATRIX R COLUMNWISE IN N*M SUCCESSIVE STORAGE
!           LOCATIONS. ON RETURN SOLUTION MATRIX R IS STORED COLUMNWISE
!           TOO.
!           THE PROCEDURE GIVES RESULTS IF THE NUMBER OF EQUATIONS M IS
!           GREATER THAN 0 AND PIVOT ELEMENTS AT ALL ELIMINATION STEPS
!           ARE DIFFERENT FROM 0. HOWEVER WARNING IER=K - IF GIVEN -
!           INDICATES POSSIBLE LOSS OF SIGNIFICANCE. IN CASE OF A WELL
!           SCALED MATRIX A AND APPROPRIATE TOLERANCE EPS, IER=K MAY BE
!           INTERPRETED THAT MATRIX A HAS THE RANK K. NO WARNING IS
!           GIVEN IN CASE M=1.
!           ERROR PARAMETER IER=-1 DOES NOT NECESSARILY MEAN THAT
!           MATRIX A IS SINGULAR, AS ONLY MAIN DIAGONAL ELEMENTS
!           ARE USED AS PIVOT ELEMENTS. POSSIBLY SUBROUTINE GELG (WHICH
!           WORKS WITH TOTAL PIVOTING) WOULD BE ABLE TO FIND A SOLUTION.
!
!        SUBROUTINES AND FUNCTION SUBPROGRAMS REQUIRED
!           NONE
!
!        METHOD
!           SOLUTION IS DONE BY MEANS OF GAUSS-ELIMINATION WITH
!           PIVOTING IN MAIN DIAGONAL, IN ORDER TO PRESERVE
!           SYMMETRY IN REMAINING COEFFICIENT MATRICES.
!
!     ..................................................................
!
SUBROUTINE gels(R,A,M,N,Eps,Ier,Aux)
   IMPLICIT NONE

   REAL A,Aux,Eps,piv,pivi,R,tb,tol
   INTEGER i,Ier,ii,j,k,l,lend,ll,lld,llst,lr,lst,lt,M,N,nm

!
!
   DIMENSION A(*),R(*),Aux(*)
   INTEGER :: spag_nextblock_1
   INTEGER :: spag_nextblock_2
   spag_nextblock_1 = 1
   SPAG_DispatchLoop_1: DO
      SELECT CASE (spag_nextblock_1)
      CASE (1)
         IF ( M>0 ) THEN
!
!     SEARCH FOR GREATEST MAIN DIAGONAL ELEMENT
            Ier = 0
            piv = 0.
            l = 0
            DO k = 1,M
               l = l + k
               tb = abs(A(l))
               IF ( tb>piv ) THEN
                  piv = tb
                  i = l
                  j = k
               ENDIF
            ENDDO
            tol = Eps*piv
!     MAIN DIAGONAL ELEMENT A(I)=A(J,J) IS FIRST PIVOT ELEMENT.
!     PIV CONTAINS THE ABSOLUTE VALUE OF A(I).
!
!
!     START ELIMINATION LOOP
            lst = 0
            nm = N*M
            lend = M - 1
            SPAG_Loop_1_1: DO k = 1,M
!
!     TEST ON USEFULNESS OF SYMMETRIC ALGORITHM
               IF ( piv<=0 ) THEN
                  spag_nextblock_1 = 2
                  CYCLE SPAG_DispatchLoop_1
               ENDIF
               IF ( Ier==0 ) THEN
                  IF ( piv<=tol ) Ier = k - 1
               ENDIF
               lt = j - k
               lst = lst + k
!
!     PIVOT ROW REDUCTION AND ROW INTERCHANGE IN RIGHT HAND SIDE R
               pivi = 1./A(i)
               DO l = k,nm,M
                  ll = l + lt
                  tb = pivi*R(ll)
                  R(ll) = R(l)
                  R(l) = tb
               ENDDO
!
!     IS ELIMINATION TERMINATED
               IF ( k>=M ) EXIT SPAG_Loop_1_1
!
!     ROW AND COLUMN INTERCHANGE AND PIVOT ROW REDUCTION IN MATRIX A.
!     ELEMENTS OF PIVOT COLUMN ARE SAVED IN AUXILIARY VECTOR AUX.
               lr = lst + (lt*(k+j-1))/2
               ll = lr
               l = lst
               DO ii = k,lend
                  spag_nextblock_2 = 1
                  SPAG_DispatchLoop_2: DO
                     SELECT CASE (spag_nextblock_2)
                     CASE (1)
                        l = l + ii
                        ll = ll + 1
                        IF ( l<lr ) THEN
                        ELSEIF ( l==lr ) THEN
                           A(ll) = A(lst)
                           tb = A(l)
                           spag_nextblock_2 = 2
                           CYCLE SPAG_DispatchLoop_2
                        ELSE
                           ll = l + lt
                        ENDIF
                        tb = A(ll)
                        A(ll) = A(l)
                        spag_nextblock_2 = 2
                     CASE (2)
                        Aux(ii) = tb
                        A(l) = pivi*tb
                        EXIT SPAG_DispatchLoop_2
                     END SELECT
                  ENDDO SPAG_DispatchLoop_2
               ENDDO
!
!     SAVE COLUMN INTERCHANGE INFORMATION
               A(lst) = lt
!
!     ELEMENT REDUCTION AND SEARCH FOR NEXT PIVOT
               piv = 0.
               llst = lst
               lt = 0
               DO ii = k,lend
                  pivi = -Aux(ii)
                  ll = llst
                  lt = lt + 1
                  DO lld = ii,lend
                     ll = ll + lld
                     l = ll + lt
                     A(l) = A(l) + pivi*A(ll)
                  ENDDO
                  llst = llst + ii
                  lr = llst + lt
                  tb = abs(A(lr))
                  IF ( tb>piv ) THEN
                     piv = tb
                     i = lr
                     j = ii + 1
                  ENDIF
                  DO lr = k,nm,M
                     ll = lr + lt
                     R(ll) = R(ll) + pivi*R(lr)
                  ENDDO
               ENDDO
            ENDDO SPAG_Loop_1_1
!     END OF ELIMINATION LOOP
!
!
!     BACK SUBSTITUTION AND BACK INTERCHANGE
            IF ( lend<0 ) THEN
               spag_nextblock_1 = 2
               CYCLE SPAG_DispatchLoop_1
            ENDIF
            IF ( lend/=0 ) THEN
               ii = M
               DO i = 2,M
                  lst = lst - ii
                  ii = ii - 1
                  l = A(lst) + .5
                  DO j = ii,nm,M
                     tb = R(j)
                     ll = j
                     k = lst
                     DO lt = ii,lend
                        ll = ll + 1
                        k = k + lt
                        tb = tb - A(k)*R(ll)
                     ENDDO
                     k = j + l
                     R(j) = R(k)
                     R(k) = tb
                  ENDDO
               ENDDO
            ENDIF
            RETURN
         ENDIF
         spag_nextblock_1 = 2
      CASE (2)
!
!
!     ERROR RETURN
         Ier = -1
         EXIT SPAG_DispatchLoop_1
      END SELECT
   ENDDO SPAG_DispatchLoop_1
END SUBROUTINE gels
